{
  "name": "intl",
  "version": "1.0.1",
  "description": "Polyfill the ECMA-402 Intl API (except collation)",
  "main": "index.js",
  "jsnext:main": "src/main.js",
  "directories": {
    "test": "tests"
  },
  "browser": {
    "./locale-data/complete": false,
    "./locale-data/complete.js": false
  },
  "devDependencies": {
    "async": "^0.9.0",
    "cldr-cal-buddhist-full": "^27.0.3",
    "cldr-cal-chinese-full": "^27.0.3",
    "cldr-cal-coptic-full": "^27.0.3",
    "cldr-cal-dangi-full": "^27.0.3",
    "cldr-cal-ethiopic-full": "^27.0.3",
    "cldr-cal-hebrew-full": "^27.0.3",
    "cldr-cal-indian-full": "^27.0.3",
    "cldr-cal-islamic-full": "^27.0.3",
    "cldr-cal-japanese-full": "^27.0.3",
    "cldr-cal-persian-full": "^27.0.3",
    "cldr-cal-roc-full": "^27.0.3",
    "cldr-core": "^27.0.3",
    "cldr-dates-full": "^27.0.3",
    "cldr-numbers-full": "^27.0.3",
    "cli-color": "^1.0.0",
    "clui": "^0.3.1",
    "finalhandler": "^0.4.0",
    "glob": "^5.0.3",
    "grunt": "^0.4.5",
    "grunt-bundle-jsnext-lib": "^0.5.0",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-copy": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-uglify": "^0.5.1",
    "grunt-curl": "^2.1.0",
    "grunt-zip": "^0.16.2",
    "jshint": "^2.5.5",
    "object.assign": "^1.1.1",
    "sauce-tunnel": "^2.2.3",
    "serve-static": "^1.10.0",
    "wd": "^0.3.6"
  },
  "scripts": {
    "pretest": "grunt jshint",
    "test": "cd tests && node noderunner.js && node saucelabs.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/andyearnshaw/Intl.js.git"
  },
  "keywords": [
    "intl",
    "i18n",
    "internationalization",
    "ecma402",
    "polyfill"
  ],
  "author": {
    "name": "Andy Earnshaw"
  },
  "email": "andyearnshaw@gmail.com",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/andyearnshaw/Intl.js/issues"
  },
  "readme": "# Intl.js [![Build Status][]](https://travis-ci.org/andyearnshaw/Intl.js)\n\nIn December 2012, ECMA International published the first edition of Standard ECMA-402,\nbetter known as the _ECMAScript Internationalization API_. This specification provides\nthe framework to bring long overdue localization methods to ECMAScript implementations.\n\nAll modern browsers, except safari, have implemented his API. `Intl.js` fills the void of availability for this API. It will provide the framework as described by the specification, so that developers can take advantage of the native API\nin environments that support it, or `Intl.js` for legacy or unsupported environments.\n\n[Build Status]: https://travis-ci.org/andyearnshaw/Intl.js.svg?branch=master\n\n\n## Getting started\n\n### Intl.js and FT Polyfill Service\n\nIntl.js polyfill was recently added to the [Polyfill service][], which is developed and maintained by a community of contributors led by a team at the [Financial Times](http://www.ft.com/). It is available through `cdn.polyfill.io` domain, which routes traffic through [Fastly](http://www.fastly.com/), which makes it available with global high availability and superb performance no matter where your users are.\n\nTo use the Intl polyfill through the [Polyfill service][] just add one script tag in your page before you load or parse your own JavaScript:\n\n```\n<script src=\"https://cdn.polyfill.io/v1/polyfill.min.js?features=Intl.~locale.en\"></script>\n```\n\nWhen specifying the `features` to use through the polyfill service, you have to specify what locale, or locales to load along with the Intl polyfill for the page to function, in the example above we are specifying `Intl.~locale.en`, which means only `en`, but you could do something like this:\n\n```\n<script src=\"https://cdn.polyfill.io/v1/polyfill.min.js?features=Intl.~locale.fr,Intl.~locale.pt\"></script>\n```\n\n_note: the example above will load the polyfill with two locale data set, `fr` and `pt`._\n\nThis is by far the best option to use the Intl polyfill since it will only load the polyfill code and the corresponding locale data when it is really needed (e.g.: safari will get the code and patch the runtime while chrome will get an empty script tag).\n\n[Polyfill service]: https://cdn.polyfill.io/v1/docs/\n\n### Intl.js and Node\n\nFor Node.js applications, you can install `intl` using NPM:\n\n    npm install intl\n\nNode.js 0.12 has the Intl APIs built-in, but only includes the English locale data by default. If your app needs to support more locales than English, you'll need to [get Node to load the extra locale data](https://github.com/nodejs/node/wiki/Intl), or use `intl` npm package to patch the runtime with the Intl polyfill. Node.js versions prior to 0.12 and â‰¥v3.1 don't provide the Intl APIs, so they require that the runtime is polyfilled.\n\nThe following code snippet uses the intl polyfill and [intl-locales-supported](https://github.com/yahoo/intl-locales-supported) npm packages which will help you polyfill the Node.js runtime when the Intl APIs are missing, or if the built-in Intl is missing locale data that's needed for your app:\n\n```javascript\nvar areIntlLocalesSupported = require('intl-locales-supported');\n\nvar localesMyAppSupports = [\n    /* list locales here */\n];\n\nif (global.Intl) {\n    // Determine if the built-in `Intl` has the locale data we need.\n    if (!areIntlLocalesSupported(localesMyAppSupports)) {\n        // `Intl` exists, but it doesn't have the data we need, so load the\n        // polyfill and patch the constructors we need with the polyfill's.\n        var IntlPolyfill    = require('intl');\n        Intl.NumberFormat   = IntlPolyfill.NumberFormat;\n        Intl.DateTimeFormat = IntlPolyfill.DateTimeFormat;\n    }\n} else {\n    // No `Intl`, so use and load the polyfill.\n    global.Intl = require('intl');\n}\n```\n\n### Intl.js and Browserify/webpack\n\nIf you build your application using [browserify][] or [webpack][], you will install `intl` npm package as a dependency of your application. Ideally, you will avoid loading this library if the browser supports the\nbuilt-in `Intl`. An example of conditional usage using [browserify][] or [webpack][] _might_ look like this:\n\n```javascript\nfunction runMyApp() {\n    var nf = new Intl.NumberFormat(undefined, {style:'currency', currency:'GBP'});\n    document.getElementById('price').textContent = nf.format(100);\n}\nif (!global.Intl) {\n    require.ensure([\n        'intl',\n        'intl/locale-data/jsonp/en.js'\n    ], function (require) {\n        require('intl');\n        require('intl/locale-data/jsonp/en.js');\n        runMyApp()\n    });\n} else {\n    runMyApp()\n}\n```\n\n_note: the locale data is required for the polyfill to function when using it in a browser environment, in the example above, the english (`en`) locale is being required along with the polyfill itself._\n\n[webpack]: https://webpack.github.io/\n[browserify]: http://browserify.org/\n\n### Intl.js and Bower\n\nIntl.js is also available as a [Bower](http://bower.io) component for the front-end:\n\n    bower install intl\n\nThen include the polyfill in your pages as described below:\n\n```html\n<script src=\"path/to/intl/Intl.js\"></script>\n<script src=\"path/to/intl/locale-data/jsonp/en.js\"></script>\n```\n\n_note: use the locale for the current user, instead of hard-coding to `en`._\n\n## Status\nCurrent progress is as follows:\n\n### Implemented\n - All internal methods except for some that are implementation dependent\n - Checking structural validity of language tags  \n - Canonicalizing the case and order of language subtags\n - __`Intl.NumberFormat`__\n   - The `Intl.NumberFormat` constructor ([11.1](http://www.ecma-international.org/ecma-402/1.0/#sec-11.1))\n   - Properties of the `Intl.NumberFormat` Constructor ([11.2](http://www.ecma-international.org/ecma-402/1.0/#sec-11.2))\n   - Properties of the `Intl.NumberFormat` Prototype Object ([11.3](http://www.ecma-international.org/ecma-402/1.0/#sec-11.3))\n   - Properties of Intl.NumberFormat Instances([11.4](http://www.ecma-international.org/ecma-402/1.0/#sec-11.4))\n - __`Intl.DateTimeFormat`__\n   - The `Intl.DateTimeFormat` constructor ([12.1](http://www.ecma-international.org/ecma-402/1.0/#sec-12.1))\n   - Properties of the `Intl.DateTimeFormat` Constructor ([12.2](http://www.ecma-international.org/ecma-402/1.0/#sec-12.2))\n   - Properties of the `Intl.DateTimeFormat` Prototype Object ([12.3](http://www.ecma-international.org/ecma-402/1.0/#sec-12.3))\n   - Properties of Intl.DateTimeFormat Instances([12.4](http://www.ecma-international.org/ecma-402/1.0/#sec-12.4))\n - Locale Sensitive Functions of the ECMAScript Language Specification\n   - Properties of the `Number` Prototype Object ([13.2](http://www.ecma-international.org/ecma-402/1.0/#sec-13.2))\n   - Properties of the `Date` prototype object ([13.3](http://www.ecma-international.org/ecma-402/1.0/#sec-13.3))\n\n### Not Implemented\n - `BestFitSupportedLocales` internal function\n - Implementation-dependent numbering system mappings\n - Calendars other than Gregorian\n - Support for time zones\n - Collator objects (`Intl.Collator`) (see below)\n - Properties of the `String` prototype object\n\nA few of the implemented functions may currently be non-conforming and/or incomplete.  \nMost of those functions have comments marked as 'TODO' in the source code.\n\nThe test suite is run with Intl.Collator tests removed, and the Collator\nconstructor removed from most other tests in the suite.  Also some parts of\ntests that cannot be passed by a JavaScript implementation have been disabled,\nas well as a small part of the same tests that fail due to [this bug in v8][].\n\n [this bug in v8]: https://code.google.com/p/v8/issues/detail?id=2694\n\n\n## What about Intl.Collator?\n\nProviding an `Intl.Collator` implementation is no longer a goal of this project. There\nare several reasons, including:\n\n - The CLDR convertor does not automatically convert collation data to JSON\n - The Unicode Collation Algorithm is more complicated that originally anticipated,\n   and would increase the code size of Intl.js too much.\n - The Default Unicode Collation Element Table is huge, even after compression, and\n   converting to a native JavaScript object would probably make it slightly larger.\n   Server-side JavaScript environments will (hopefully) soon support Intl.Collator,\n   and we can't really expect client environments to download this data.\n\n\n## Compatibility\nIntl.js is designed to be compatible with ECMAScript 3.1 environments in order to\nfollow the specification as closely as possible. However, some consideration is given\nto legacy (ES3) environments, and the goal of this project is to at least provide a\nworking, albeit non-compliant implementation where ES5 methods are unavailable.\n\nA subset of the tests in the test suite are run in IE 8.  Tests that are not passable\nare skipped, but these tests are mostly about ensuring built-in function behavior.\n\n\n## Locale Data\n`Intl.js` uses the Unicode CLDR locale data, as recommended by the specification. The main `Intl.js` file contains no locale data itself. In browser environments, the\ndata should be provided, passed into a JavaScript object using the\n`Intl.__addLocaleData()` method.  In Node.js, or when using `require('intl')`, the data\nis automatically added to the runtime and does not need to be provided.\n\nContents of the `locale-data` directory are a modified form of the Unicode CLDR\ndata found at http://www.unicode.org/cldr/.\n\n\n## Contribute\n\nSee the [CONTRIBUTING file][] for info.\n\n[CONTRIBUTING file]: https://github.com/andyearnshaw/Intl.js/blob/master/CONTRIBUTING.md\n\n\n## License\n\nCopyright (c) 2013 Andy Earnshaw\n\nThis software is licensed under the MIT license.  See the `LICENSE.txt` file\naccompanying this software for terms of use.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/andyearnshaw/Intl.js#readme",
  "_id": "intl@1.0.1",
  "_shasum": "a6a566aa5ee3738c9c17b44bfa12fa4ec2623f78",
  "_resolved": "https://registry.npmjs.org/intl/-/intl-1.0.1.tgz",
  "_from": "https://registry.npmjs.org/intl/-/intl-1.0.1.tgz"
}
